# wrangler.toml
# Complete Cloudflare Workers configuration for Insight Hunter

# Authentication Worker
# Handles all user authentication: registration, login, password resets, token verification
# Routes all /auth/* requests to this Worker
[[services]]
name = "insighthunter-auth"
main = "workers/auth/index.js"
compatibility_date = "2024-01-01"

# This Worker handles authentication endpoints
# Everything under /auth goes here, like /auth/login, /auth/register, /auth/verify
routes = [
  { pattern = "api.insighthunter.app/auth/*", zone_name = "insighthunter.app" }
]

# Bindings give this Worker access to resources it needs
# The database binding lets it query and update the users table
[[services.d1_databases]]
binding = "DB"
database_name = "insighthunter-production"
database_id = "env.D1DATABASE_ID"

# Environment variables this Worker needs
# JWT_SECRET must be a long random string for security
# Never commit the actual secret to your git repository
[services.vars]
JWT_SECRET = "8cb92eb311e1a8106f160b01da419580707c8e5b225917dccdc5b211595f76cfe6c12c26ae9aa3859d358ea7a18183b6209673c9bbc90596d516e0a55b575f79"
CORS_ORIGIN = "https://app.insighthunter.app"

# Data Ingestion Worker
# Now includes Vectorize for intelligent transaction categorization
[[services]]
name = "insighthunter-ingest"
main = "workers/ingest/index.js"
compatibility_date = "2024-01-01"

routes = [
  { pattern = "api.insighthunter.app/api/upload", zone_name = "insighthunter.app" },
  { pattern = "api.insighthunter.app/api/transactions/*", zone_name = "insighthunter.app" }
]

[[services.d1_databases]]
binding = "DB"
database_name = "insighthunter-production"
database_id = "env.D1DATABASE_ID"

[[services.r2_buckets]]
binding = "STORAGE"
bucket_name = "insighthunter-uploads"

[[services.ai]]
binding = "AI"

# Vectorize binding for semantic transaction categorization
[[services.vectorize]]
binding = "VECTORIZE"
index_name = "transaction-categories"

[services.vars]
JWT_SECRET = "env.JWT_SECRET"
MAX_FILE_SIZE = "10485760"

# Analytics Worker
# Generates forecasts, calculates insights, and powers the dashboard charts
# This is computationally intensive so it gets its own Worker
# Now includes Vectorize for finding similar patterns and generating insights
[[services]]
name = "insighthunter-analytics"
main = "workers/analytics/index.js"
compatibility_date = "2024-01-01"

routes = [
  { pattern = "api.insighthunter.app/api/forecast/*", zone_name = "insighthunter.app" },
  { pattern = "api.insighthunter.app/api/insights/*", zone_name = "insighthunter.app" },
  { pattern = "api.insighthunter.app/api/dashboard/*", zone_name = "insighthunter.app" },
  { pattern = "api.insighthunter.app/api/search/*", zone_name = "insighthunter.app" }
]

[[services.d1_databases]]
binding = "DB"
database_name = "insighthunter-production"
database_id = "env.D1DATABASE_ID"

[[services.kv_namespaces]]
binding = "CACHE"
id = "env.KV_NAMESPACE_ID"

[[services.ai]]
binding = "AI"

[services.vars]
JWT_SECRET = "env.JWT_SECRET"

# Management Worker  
# Handles clients, user settings, alerts, and general CRUD operations
# This is the catch-all for operations that don't fit other specialized Workers
[[services]]
name = "insighthunter-management"
main = "workers/management/index.js"
compatibility_date = "2024-01-01"

# Routes for client management, alerts, and user profile operations
routes = [
  { pattern = "api.insighthunter.app/api/clients/*", zone_name = "insighthunter.app" },
  { pattern = "api.insighthunter.app/api/alerts/*", zone_name = "insighthunter.app" },
  { pattern = "api.insighthunter.app/api/user/*", zone_name = "insighthunter.app" }
]

[[services.d1_databases]]
binding = "DB"
database_name = "insighthunter-production"
database_id = "env.D1DATABASE_ID"

# KV for caching user preferences and client lists
[[services.kv_namespaces]]
binding = "CACHE"
id = "env.KV_NAMESPACE_ID"

[services.vars]
JWT_SECRET = "env.JWT_SECRET"

# Vectorize binding for semantic search and pattern matching
[[services.vectorize]]
binding = "VECTORIZE"
index_name = "transaction-categories"

[services.vars]
JWT_SECRET = "env.JWT_SECRET"
